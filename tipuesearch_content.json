{"pages":[{"url":"https://sevas.github.io/multiple-python-osx-update.html","text":"Digression: Enthought Python Distribution considered awesome The main reason I made this program is because, alongside the Apple-supplied python and the vanilla pythons from python.org , I use a python distribution dedicated to scientific work. Anyone who ever lost an afternoon trying to install numpy and scipy from sources should make herself a favor and try this instead. It's not merely a collection of compiled packages. It's a damn platform. You should be thankful for this. I know I am. Alright, alright. So what's new? Well, the program described in my latest entry suffered from at least one major flaw: it did not detect the 64bits builds of EPD. The reason for this is that they are installed under yet another directory (namely, /Library/Frameworks/EPD64.framework .) That's it. It's still a really simple program, but serves its purpose. Grab it on github . What's next? I realize that this is a really simple and, perhaps, clumsy way to switch between multiple python runtimes. Ideally, this should be built into the OS. For every interpreter or compiler you might want concurrent versions of. Something along the lines of the 'alternatives' system you can find in some linux distros. But for now, that's all there is. Priorities.","tags":"Python","title":"Managing multiple python installations on Mac OS X - A  minor update"},{"url":"https://sevas.github.io/multiple-python-osx.html","text":"There is a party in my OSX And all the pythons got invited. $ ls -l /System/Library/Frameworks/Python.framework/Versions/ total 8 drwxr-xr-x 8 root wheel 272 Mar 29 19:20 2.3 drwxr-xr-x 12 root wheel 408 Apr 11 13:48 2.5 drwxr-xr-x 12 root wheel 408 Apr 11 13:48 2.6 lrwxr-xr-x 1 root wheel 3 Mar 29 19:20 Current -> 2.6 $ ls -l /Library/Frameworks/Python.framework/Versions/ total 8 drwxrwxr-x 10 root admin 340 Nov 30 2010 2.7 drwxrwxr-x 9 root admin 306 Nov 30 2010 3.1 drwxrwxr-x 9 root admin 306 Feb 20 20:14 3.2 drwxrwxr-x 19 root admin 646 Jan 15 19:26 6.3 lrwxr-xr-x 1 root admin 3 Jan 15 19:21 Current -> 6.3 Alright. Fast switching What I want, is an easy way to switch between all these different python installations from my shell. For instance, going from the OSX python 2.6 installation to python 3.1: $ select_macpython31 Setting environment for MacPython 3.1 $ python3 Python 3.1.3 (r313:86882M, Nov 30 2010, 09:55:56) [GCC 4.0.1 (Apple Inc. build 5494)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> exit() And then, I could switch to the new python 3.2 I just got from python.org : $ select_macpython32 Setting environment for MacPython 3.2 $ python3 Python 3.2 (r32:88452, Feb 20 2011, 11:12:31) [GCC 4.2.1 (Apple Inc. build 5664)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> That would be nice. And that's exactly what this page is about. Show me the code What we need is a bunch of bash functions to update the PATH environment variable, so that the selected python installation is the default. If you had 3 pythons, it would look like this: But because I'm lazy, I don't want to write a switching function everytime I add a python, I made this instead. This script looks in the directories where python is usually installed, detects all the versions, and generates a .python_switchers.sh file. This file will have all the switching functions. If you download and run it, you should see something like this: $ update_python_switchers.py Using generic prompt Adding System Python 2.3 Adding System Python 2.5 Adding System Python 2.6 Adding MacPython 2.7 Adding MacPython 3.1 Adding MacPython 3.2 Adding EPD 6.3 Saved python switcher bash functions to /Users/sevas/.python_switchers.sh Next, you will need to add this to your $HOME/.bash_profile : Now you will be able to use the switching functions from your shell, like I showed earlier What have you done to my prompt? If you read until now, maybe you tried it, and noticed your prompt was different. The reason is that the generated switchers actually look more like this: This is because I find it useful to know at a glance in which environment I'm working, so I modified the PS1 variable accordingly. Fancy colors for fancy people If you run: $ update_python_switchers.py --use-fancy-prompt you will get my carefully crafted prompt with fancy colors. This is how it looks: Alt Text You will find the color variables in my .bash_profile file. If you already have a custom prompt, just go ahead and edit the function generation template in update_python_switchers.py to your liking. And if you don't like it, well, it's pretty easy to remove anyway. This could obviously be improved. Maybe I will. You should use virtualenv and virtualenvwrapper Well I do. These switchers are working on another level. virtualenv is mostly about having many concurrent site-packages directories. One more thing This script requires the argparse module, so you should go ahead and install it with: $ easy_install argparse if it's not part of your python, which will be the case if you're not running python 2.7 or 3.2.","tags":"Python","title":"Managing multiple python installations on Mac OS X"},{"url":"https://sevas.github.io/pycharm-colors.html","text":"A matter of taste PyCharm is a neat development environment, especially if you're working with Google App Engine or Django . But the default color scheme is pretty horrendous, and their effort to bundle additional schemes has been less than fruitful, in my opinion (seriously, WarmNeon ?) In addition, I find that using dark color schemes in a environment where a significant area will stay white and bright is pretty idiotic. And I know this because I did it for a year. Enters Solarized (Light) Recently, the Solarized color schemes were picked on by Hacker News , and several people ported it to their favourite editor. However, I could not find anything good enough for PyCharm (or any other IntelliJ -based IDE). It was often wrong, incomplete, or both. This is my attempt to make a coherent theme from these colors, for all the file types supported by PyCharm: python, of course, but also HTML, css, YAML, django templates, and so on. It's just one XML file to download. Grab it on github . Installation The downloaded file should be copied to the following directory: MacOS X: ~/Library/Preferences/PyCharm10/colors GNU/Linux: ~/.PyCharm10/config/color Windows Vista and 7: C:\\Users\\$USER\\.PyCharm10\\config\\colors Windows XP: C:\\Documents and Settings\\$USER\\.PyCharm10\\config\\colors Restart PyCharm, change the editor colors in the settings, and you're gold. Final note I try not to be a typography nerd or anything, but I do like when things look nice. Because I mainly use PyCharm on MacOS X, the font used is Menlo. This font ships with OS X, but is not likely to be on your Windows or Linux computer. On modern Windows systems, tasteful people use Consolas (I know I do.) On a GNU/Linux box, you're probably good with the default monospace font shipping with your desktop environment. But stay away from Courier New.","tags":"misc","title":"Solarized Light color scheme for PyCharm"},{"url":"https://sevas.github.io/euroscipy-2010-lightning-talks.html","text":"Notes taken during the lightning talks session EuroScipy 2010 conference in Paris. Most talks were about presenting a new scientific python module or software package. This was also an opportunity for the authors to make a call for contributions. glumpy A lightweight visualization library based on PyOpenGL and numpy. Does not attempt to replace Mayavi and serves a different purpose. A nice way to have fast animations for figures rendered with matplotlib . joblib A lightweight pipelining library. Syntatic sugar over the multiprocessing module NPK 2.0 A nuclear magnetic resonance processing kernel. The current version uses a Java GUI with some Jython . It does not currently use numpy/scipy, but there is an ongoing rewrite in that direction. fermhub Multiple notebooks for SAGE . peewit An agnostic machine learning framework. Rather than focusing on the actual computations, peewit aims to do the housekeeping of running the experiments. scikits.learn A machine learning library, implements general-purpose ML algorithms. It has efficient bindings to libSVM and LibLinear . Many examples on the site. From the audience : > How does it compare to > Orange ? Orange is a GUI over many algorithms. It also has many dependencies. scikits.learn aims to be an easy to install, easy to use API. There are many machine learning libraries currently being developed. There should be an effort to unify everything. Author does not disagree. RST/Sphinx based thesis authoring tool-chain This is more a wish than an actual implementation. LaTeX has many great features and beautiful typography, for text and equations, but is too complicated. Any self-respecting scientist won't use Word to publish her work. reStructuredText and Sphinx fit nicely in the middle of this spectrum. However, as a tool originally developed for making documentation and manuals, it currently lacks some basic functionality to author scientific work. The most critical one being proper support for citations. An RST-based presentation tool would also be nice. An audience member pointed to the rst2beamer package. Personal note : It's not RST, but the markdown -based showoff presentation system is pretty enjoyable. uncertainties A python module to handle calculations on numbers with uncertainties. Uses error propagation theory. upy Another python module to handle error propagation and uncertainty in computations. Uses Gaussian error propagation. SNPedia An effort to centralize informations about SNPs ( \"snips\" ). For every SNP, SNPedia links to related research papers. The database is used by the Promethease reporting tool, which can import data data from genetic testing services like 23andme . The slides are still available as a Google Docs presentation . Interfacing with instruments for experimental physics This is call for feedback on how python could help replacing Labview , to interface with measurements and control hardware used in experimental physics. Vendors rarely ships a python API. And a GUI tool like Labview does not shine to run batch experiments, where a script would be great. Questions : Why and when did you leave matlab and labview? The speaker did not leave matlab. Only the \"nightmare\" (sic) that is Labview. If you get a binary vendor DLL, why not use ctypes ? ctypes works well with DLLs written in C, not so much when they are written in C++. In that case, you need to write a C wrapper first. matplotlib and HTML5/Canvas As of version 1.0, the popular python plotting library matplotlib got a HTML5 Canvas backend. Really useful for SAGE. A nice step to make anything with a modern browser a decent platform for scientific work. The 3D plot demo wasn't really convincing though.","tags":"Python","title":"EuroScipy 2010 Lightning Talks"},{"url":"https://sevas.github.io/multiple-python-windows.html","text":"Problem So sometimes, it might be good idea to keep several sandboxed python installations. Here are some examples where such a scenario may occur: My default python installation is 2.7 I want to keep my EPD distribution clean The Ogre3D bindings are only available for Python2.6 at the moment What about using python3 alongside everything else? A Solution The idea here is to create a command prompt shortcut for every concurrent python installation. First, you need a .bat file that will set various environment variables. Here is an example file, targetted at my EPD installation, which is installed in C:\\Python26_EPD622 : Copy this, and change the PYTHON_ROOT variable to the root folder of the python installation you're configuring. Put the file anywhere you want to. Next, we will create a shortcut to a windows command prompt that will automatically call that script, and setup your environmnent. Locate the folder containing the original Command Prompt shortcut. On Windows Vista/7, it should be in: C:\\Users\\<username>\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Accessories . Copy it, and rename it, for example to Python26 (EPD 6.2) Command Prompt . Rigth click on it, select Properties . This should appear: before Change the target to: %comspec% /k \"\"c:\\path\\to\\epd62.bat\"\" and click OK . Notice the two pairs of double quotes. after You can now move this shortcut wherever you see fit. You can keep it in the start menu, create a special start menu folder for all your python prompts, move it to the quicklaunch bar, and so on. Once this is done, you can now: Launch a (i)python shell Install packages with easy_install or pip Launch any binary third party tool shipped with your python distribution success Repeat for every python installation. Final note This is not a mean to register several python distribution with your IDE. Any decent python IDE, such as Pydev for eclipse or PyCharm let you register several python interpreters.","tags":"Python","title":"Managing multiple python installations on Windows"},{"url":"https://sevas.github.io/euroscipy-2010-keynote-1.html","text":"These are some notes taken during the keynote talk of Prof. Hans Petter Langtangen at the EuroScipy 2010 conference in Paris. Teaching science and engineering Case study : University of Oslo, Norway Mathematics and engineering sciences should be taught with a very hands-on approach. Students need to launch simulations, tinker with parameters, vizualize outcomes from day one. This is the future of science education. Undergrads mathematics and mathematical modeling courses were recently redesigned at University of Oslo. The current, revamped cursus includes calculus, numerical calculus, scientific programming using python, vector calculus and linear algebra, mechanics with simulation. There is a very strong focus on experimentation. An example of first year project is the numerical simulation of a pendulum with friction. This is fairly advanced material that wasn't covered by previous undergrad courses. This approach was really well received by the students. Why python is the language of choice? Python is a great tool for quick prototyping, unlike Java. It also is a general purpose programming language, suitable for many kinds of computing tasks, unlike matlab. In previous years, students were doing matlab after an introduction course with Java. It was hard to establish a connection between what was learned in the programming course, and all the apparent magic going on in matlab. Python offers a natural transition from matlab-style flat scripts, to full fledged object-oriented applications with complex GUIs, data processing and results reporting. Python is executable pseudo-code. This helps students focus on the problem to solve, rather than deal with the syntax. Producing an algorithmic solution improves how student effectively understands the material. This is what should matter first. Fighting deployment hell One of the biggest problem with a python scientific stack, is the pain involved when deploying an application with its dependencies, or just setting up the right development environment for scientific computing. There are several distributions ( Enthought Python Distribution , python(x,y) , SAGE , linux distribution package systems, ...). This is a lot to maintain in parallel. Throw in some C and FORTRAN extensions (which are ubiquituous as soon as you're using python for science) and you're in for hell of a ride. To prevent spending too much time on this, the course officially supports Ubuntu as the only platform (dualboot or virtualbox ). Students can then get all the required software through a dedicated package repository (e.g. apt-get install mycourse ). Install parties are organized to help beginners get their setup ready. Experience shows that people are more happy with this approach. People who don't like Ubuntu will need to figure out the installation by themselves. Research & High Performance Computing \"Python is slow\" Addressing the myth: it turns out all you really need is to compile your number crunching loops and call it a day. Popular strategies for this includes cython and scipy.weave . Large scale projects Python is not just suitable for small school projects. fenics , pyadh , fipy , hedge , gpaw , pNbody are examples of python-based software packages aimed at solving real-world engineering problems. Parallel computing Scientists often need to launch long computations on computer clusters. mpi4py are python bindings for the popular message passing library MPI , which is one way to enable exploitation of multiprocessor architectures. A typical scenario would be using python to control the pipeline, set the simulation parameters, and let the high-performance, often legacy FORTRAN code, do the number crunching. Numpy and scipy can also be used for that kind of heavy lifting. Further improving the adoption of python in science One of the strong points of matlab is the ubiquity of code samples available. We need that for the python scientific stack. Unification of interfaces between ODE solvers, linear algebra packages, visualization packages is much needed. There are still skeptics about whether a \"scripting language\" can be a fitting choice for high-performance computations. Finding and referencing real-world examples in which python was succesfully used helps. The bottom line being that one doesn't need to write the whole application in C or C++ for it to be fast.","tags":"Python","title":"EuroScipy 2010 Keynote Talk - Advanced Teaching and Research with Python"},{"url":"https://sevas.github.io/pdb-psyco.html","text":"Note This is a rewrite of an old blog post from way back, it still might be useful so I'm throwing it on here. Pdb , the standard python debugger, does not play nice with psyco . Or maybe it's the opposite. To illustrate this, let's start with a simple python program, that will surely provoke a breakpoint: import psyco psyco . full () def foo ( arg ): \"\"\"triggers a breakpoint\"\"\" i , j , k = [ arg ] * 3 1 / 0 return arg * 2 if __name__ == '__main__' : print foo ( i ) A debugging session with pdb should look like that: $ pdb hello_pdb.py > /home/sevas/code/python/hello_pdb.py(1)() -> import psyco (Pdb) c Traceback (most recent call last): File \"/usr/bin/pdb\", line 1213, in main pdb._runscript(mainpyfile) File \"/usr/bin/pdb\", line 1138, in _runscript self.run(statement, globals=globals_, locals=locals_) File \"/usr/lib/python2.5/bdb.py\", line 366, in run exec cmd in globals, locals File \"\", line 1, in File \"hello_pdb.py\", line 11, in print foo(i) File \"hello_pdb.py\", line 7, in foo 1/0 ZeroDivisionError: integer division or modulo by zero Uncaught exception. Entering post mortem debugging Running 'cont' or 'step' will restart the program > /home/sevas/code/python/hello_pdb.py(7)foo() -> 1/0 (Pdb) arg *** NameError: name 'arg' is not defined (Pdb) locals() {} (Pdb) q Post mortem debugger finished. The hello.py will be restarted > /home/sevas/code/python/hello_pdb.py(1)() So, what happenned here? We start a pdb debugging session on the hello_pdb.py file the pdb command c (continue) starts the program The program throws a ZeroDivisionError , pdb enters post-mortem debugging We try to inspect the environment : the variable arg does not exist, the locals() dictionnary is empty. The reason for that is, when psyco is active, all your psyco-compiled functions, along with their stack frames, are stored away in a secret place which poor pdb is not aware of. At least 2 solutions exist. First, you could comment out the psyco.full() statement for every debug session. However, this isn't always an option, as some libraries always makes the use of psyco [1] if it is available. Uncommenting and recommenting in every third party library is not a reasonable option. So, how do I seamlessly disable psyco while debugging a module with Pdb ? After some research, it seemed like the pydev eclipse extension had just the workaround I needed. First, we need a fake psyco module, implementing the psyco interface. Something like this : \"\"\" Psyco stub: should implement all the external API from psyco. Taken from the pydev eclipse extension. \"\"\" def proxy ( func , * args , ** kwargs ): return func def bind ( func , * args , ** kwargs ): return func def unbind ( func , * args , ** kwargs ): return func def unproxy ( func , * args , ** kwargs ): return func def full ( * args , ** kwargs ): pass def log ( * args , ** kwargs ): pass def runonly ( * args , ** kwargs ): pass This is just a copy of the pydevd_psyco_stub.py file shipped with pydev, I'm not taking credit for anything here. Next, we need to tell pdb to replace the psyco entry in sys.modules with that fake module. This is done through the .pdbrc configuration file. Conveniently, the .pdbrc file accepts plain python code, so it's like super easy and stuff. Here's my .pdbrc : #.pdbrc import sys import os sys.path += [os.getenv(\"HOME\")] import pdb_psyco_stub sys.modules['psyco'] = pdb_psyco_stub print '*** Info : Psyco module replaced with pdb_psyco_stub' from pprint import pprint And that's it. A few remarks: Both .pdbrc and pydevd_psyco_stub.py need to be in your home directory On Windows, this means [2] putting them in an arbitrary folder, and then create a %HOME% environment variable pointing to that directory [3] I strongly recommend the use of the pprint function (especially for inspecting your data while debugging) So what does it mean for our test module from earlier ? Let me show it to you: $ pdb hello_pdb.py *** Info : Psyco module replaced with pdb_psyco_stub > /home/sevas/code/python/hello_pdb.py(1)() -> import psyco (Pdb) c Traceback (most recent call last): ...snip... File \"hello_pdb.py\", line 7, in foo 1/0 ZeroDivisionError: integer division or modulo by zero Uncaught exception. Entering post mortem debugging Running 'cont' or 'step' will restart the program > /home/sevas/code/python/hello_pdb.py(7)foo() -> 1/0 (Pdb) arg 0 (Pdb) locals() {'i': 0, 'k': 0, 'j': 0, 'arg': 0} (Pdb) Great success. [1] This is actually my primary motivation [2] Among other options, but I find this one easy enough [3] And windows users should use Rapid Environment Editor for this.","tags":"Python","title":"Making pdb work with psyco"},{"url":"https://sevas.github.io/first-post.html","text":"Goodbye shitty visual html editors, hello markdown","tags":"misc","title":"First post"}]}